Important:

For every Java file, you must insert the following Javadoc comment at the top of the file (after package declaration)

/**
* @author <Your Full Name - Your Student ID>
*/

Furthermore, for code and ideas obtained from external sources, you must cite them appropriately.

Functional

You are developing an insurance claims management system. This system enables users to manage, track, and process claims. Each customer contains the following information:
- id (with the format c-numbers; 7 numbers)
- Full name
- Insurance card
- A list of claims

Each customer can be either a policy holder or a dependent. No general customer can exist in the system. For a policy holder, there will be a list of his/her dependents.

An insurance card contains card number (10 digits), card holder, policy owner (String), and an expiration date (Note that one card can only have one holder).

A claim contains the following information:
- id (with the format f-numbers; 10 numbers)
- model.Claim date
- Insured person
- Card number
- Exam date
- List of documents (with the format ClaimId_CardNumber_DocumentName.pdf)
- model.Claim amount
- model.Status (New, Processing, Done)
- Receiver Banking Info (Bank – Name – Number)

All the dates in the system must be represented using Date object.

You must define an interface manager.ClaimProcessManager to take care of the claim lists. This interface must have the following operations: add, update, delete, getOne, getAll.

Design and implement the necessary operations for the system. Remember that all the entities must be able to be displayed in some sorted some orders, and also, allow to save these reports to text files.

When starting the program, sample customers, insurance cards, and claims must be populated from files. You can design the structure of the contents in the files as you want, and you must provide these sample files along with your codes (Each file must have at least 15 objects).

Finally, create a simple text-based UI program to let users interact with your system. The data files must be updated once the program exits.

Note: If your codes cannot run, you will receive a 0 for the programming part.
